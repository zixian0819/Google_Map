{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base64 from \"crypto-js/enc-base64\";\nimport HmacSHA1 from \"crypto-js/hmac-sha1\";\nimport CryptoJS from \"crypto-js\";\n\n/**\n * Create a signature for a path and query string using HmacSHA1.\n *\n * ```ts\n * const signature = createSignatureForPathAndQuery(\"/some-path?foo=bar\", \"secret\");\n * ```\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nexport function createSignatureForPathAndQuery(\n  pathAndQuery: string,\n  secret: string\n): string {\n  const decodedSecret = decodeSecret(secret);\n  // Sign the url with the decoded secret\n  const unsafeSignature = HmacSHA1(pathAndQuery, decodedSecret).toString(\n    Base64\n  );\n  // Convert from true base64 to 'web safe' base64\n  return unsafeSignature.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\n/**\n * Create a signature for a Google Maps request [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) or url string.\n *\n * ```ts\n * const signature = createSignature(\"https://example.com/some-path?foo=bar\", \"secret\");\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nexport function createSignature(\n  unsignedUrl: URL | string,\n  secret: string\n): string {\n  if (typeof unsignedUrl === \"string\") {\n    unsignedUrl = new URL(unsignedUrl);\n  }\n  // Strip off the protocol, scheme, and host portions of the URL, leaving only the path and the query\n  const pathAndQuery = `${unsignedUrl.pathname}${unsignedUrl.search}`;\n\n  return createSignatureForPathAndQuery(pathAndQuery, secret);\n}\n\n/**\n * Returns a new [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) having a signature parameter.\n *\n * ```ts\n * const signedUrl = signUrl(\"https://example.com/some-path?foo=bar\", \"secret\");\n * signedUrl.href; // \"https://example.com/some-path?foo=bar&signature=...\"\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nexport function signUrl(unsignedUrl: URL | string, secret: string): URL {\n  if (typeof unsignedUrl === \"string\") {\n    unsignedUrl = new URL(unsignedUrl);\n  }\n  return new URL(\n    unsignedUrl.toString() +\n      \"&signature=\" +\n      createSignature(unsignedUrl, secret)\n  );\n}\n\nfunction decodeSecret(secret: string): CryptoJS.lib.WordArray {\n  // Convert from 'web safe' base64 to true base64\n  const unsafeSecret = secret.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n  // Base64 decode the secret\n  return Base64.parse(unsafeSecret);\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;SAUgB,8BAA8B,CAC5C,YAAoB,EACpB,MAAc;IAEd,IAAM,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;;IAE3C,IAAM,eAAe,GAAG,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,QAAQ,CACpE,MAAM,CACP,CAAC;;IAEF,OAAO,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACjE,CAAC;AAED;;;;;;;;;;;SAWgB,eAAe,CAC7B,WAAyB,EACzB,MAAc;IAEd,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACnC,WAAW,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;KACpC;;IAED,IAAM,YAAY,GAAG,KAAG,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAQ,CAAC;IAEpE,OAAO,8BAA8B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;;;;;;;;SAYgB,OAAO,CAAC,WAAyB,EAAE,MAAc;IAC/D,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACnC,WAAW,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;KACpC;IACD,OAAO,IAAI,GAAG,CACZ,WAAW,CAAC,QAAQ,EAAE;QACpB,aAAa;QACb,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CACvC,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,MAAc;;IAElC,IAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;IAGlE,OAAO,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AACpC;;;;"}